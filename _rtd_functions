#!/bin/bash
###########################################################################
##                                                                       ##
##                         Functions                                     ##
##                                                                       ##
###########################################################################
#
# function to simplify downloading debs from a website
# First param is the URL, second is the name of the deb, to bypass version
# naming issues, use wildcards like skype*.deb





function set_colors () {
	# Set colors for prompting on screen.
		YELLOW="\033[1;33m"
		RED="\033[0;31m"
		ENDCOLOR="\033[0m"
		GREEN="\033[0;32m"
		BLUE="\033[0;34m"
}






function ensure_admin () {
	# Ensure administrative privileges.
	[ "$UID" -eq 0 ] || echo -e $YELLOW "This script needs administrative access..." $ENDCOLOR
	[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"
}






function set_install_command () {
	# add global install command for portability and convenience
	# If you need to use this script in an rpm based system you could modify the install
	# command here to dnf, yum, zypper... By default packages of patternd that do not
	# match should be skipped. Use "export option" so child processes also see the variiables.
				if [[ "$1" == "deb" ]]; then
									# tell debian based installers (Ubuntu, Mint etc.) to be quiet.
									export _INSTCMD="apt-get -y -qq --allow-change-held-packages --ignore-missing install"
									export DEBIAN_FRONTEND=noninteractive
									# Enable all repositories while disabling source repository list downloads in sources.list
										sed -i -e "s/# deb http/deb http/g" /etc/apt/sources.list
										sed -i -e "s/deb-src/# deb-src/g" /etc/apt/sources.list

				elif [[ "$1" == "darwin" ]]; then
				        echo "Mac OSX is currently not supported..."
				elif [[ "$1" == "rpm" ]]; then
				        echo "RPM is not yet supported..."
				elif [[ "$1" == "freebsd"* ]]; then
				        echo "Free BSD is currently unsupported... "
				else
				       echo "This function talkes the parameters: deb, rpm, darwin, freebsd, please provide a parameter..."
				fi
}







function enable_firewall () {
					# Enable firewall in Ubuntu systems
					if hash ufw 2>/dev/null; then
						echo -e $YELLOW "Configure Firewall:" $ENDCOLOR
						ufw enable && ufw allow ssh
					else
						echo UFW not present on this system...
					fi
}





function dl ()
{
	if [ -z "$_ERRLOGFILE" ]; then $_ERRLOGFILE=$0.log ; else echo "Logfile is set to: '$_ERRLOGFILE'"; fi
	if [ -z "$_LOGFILE" ]; then $_LOGFILE=$0.log ; else echo "Logfile is set to: '$_LOGFILE'"; fi
	echo    - geting package $2 ...
	wget -P /var/apt/cache/archives/ $1 1>>$_LOGFILE 2>>$_ERRLOGFILE
	echo "   - Installing package $2 ..."
	dpkg -i /var/apt/cache/archives/$2 1>>$_LOGFILE 2>>$_ERRLOGFILE
	echo "   - Installing dependencies for $2..."
	apt-get -f install -y -qq --allow-change-held-packages 1>>$_LOGFILE 2>>$_ERRLOGFILE
}





# Function to check and see if the system software managment is available
function SofwareManagmentAvailabilityCHK ()
{
echo -e $YELLOW"--- Checking if software maintenance system is available:" $ENDCOLOR
i=0
tput sc
while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    case $(($i % 4)) in
        0 ) j="-" ;;
        1 ) j="\\" ;;
        2 ) j="|" ;;
        3 ) j="/" ;;
    esac
    tput rc
    echo -en "\r[$j] Waiting for other software managers to finish..."
    sleep 0.5
    ((i=i+1))
done

# Deprecated code below:
# while [ -f /var/lib/dpkg/lock ] ;
#		do
#			echo The software managment system is locked...
#			echo Waiting 10 seconds for software managment system to be ready:
#			for i in {0..10}; do echo -ne "$i"'\r'; sleep 1; done; echo
#			echo force unlocking package managment...
#			rm -f  /var/lib/apt/lists/lock
#			rm -f /var/lib/dpkg/lock
#	done
}





# Function to simplify updating system completely...
function up2date ()
{
				# Ensure that the expected variables are defined.
				if [ -z "$_ERRLOGFILE" ]; then $_ERRLOGFILE=$0.log ; else echo "Logfile is set to: '$_ERRLOGFILE'"; fi
				if [ -z "$_LOGFILE" ]; then $_LOGFILE=$0.log ; else echo "Logfile is set to: '$_LOGFILE'"; fi

				echo -e $YELLOW"---Running up2date function:" $ENDCOLOR

				echo "--- Refreshing Software repositories; this may take a minute..."
				apt-get update 1>>$_LOGFILE 2>>$_ERRLOGFILE

				echo "--- Installing System Updates; this may take a minute..."
				apt-get dist-upgrade -y -qq --allow-change-held-packages --ignore-missing 1>>$_LOGFILE 2>>$_ERRLOGFILE

				echo "--- Cleaning up unused software; this may take a minute..."
				apt-get autoremove -y 1>>$_LOGFILE 2>>$_ERRLOGFILE
}





#Function to simplify the installation of software
function InstallSoftwareFromRepo ()
{
		# echo -ne "--- Installing "$@" "\ & $_INSTCMD "$@" >>$0.log 2>&1 && echo -e "---$GREEN [OK!] $ENDCOLOR" || echo -e "---$RED [FAIL!] $ENDCOLOR"
		# echo -ne "--- Installing "$@" "\ & $_INSTCMD "$@" >>$0.log 2>&1 && printf "%-50s %s\n $GREEN"  [OK!] $ENDCOLOR || printf "%-50s %s\n" $RED [FAIL!] $ENDCOLOR
		echo -ne "--- Installing "$@" "\ & $_INSTCMD "$@" >>$0.log 2>&1 && echo -n "$@ "; printf "%$((48-${#@}))s " | tr ' ' -; echo " [OK]"; ||echo -n "$@ "; printf "%$((48-${#@}))s " | tr ' ' -; echo " [FAIL]";
		sleep 1
		[ -e /var/lib/apt/lists/lock ] && rm -f  /var/lib/apt/lists/lock
		[ -e /var/lib/dpkg/lock ] && rm -f /var/lib/dpkg/lock
}





# Function to check that a piece of software is installed and if not install it.
# Works for apt based systems currently. The function will take a parameter that is expected to
# match the softwre command line name.
function check_dependencies ()
{
#---------------------------------------------------------------
echo "Checking for script dependencies and install if not there..."
#---------------------------------------------------------------
    if hash $1 2>/dev/null; then
        echo "I found that $1 is present on this system... thankyou for that! "
    else
        echo "You seem to have no $1... I will try to get it... "
        apt install $1 -y
            if [ $? != 0 ];
            then
                echo "That install didn't work out so well."
                echo "Please manually try to add the software since I couldn't do it."
                exit
            fi
        echo "OK Done! Continuing..."
    fi
}


# make prompt colors avaiable to any script that includes this function lbrary.
set_colors
