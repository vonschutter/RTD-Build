#!/bin/bash
#
#::             Linux deb and rpm based distro functions that may be usefull for admin 
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:: Author:   	Stephan S. & Nate B. Buffalo Center, IA
#:: Version 1.01
#::
#::
#::	Purpose: to collect and enable the use of code snipplets in other scripts. 
#::     Usage: call this file using the "source" statment in bash.
#:: 
#::     This script is shared in the hopes that
#::     someone will find it usefull.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

###########################################################################
##                                                                       ##
##                         Functions                                     ##
##                                                                       ##
###########################################################################
#

source /opt/rtd/scripts/_rtd_recipies

# Set colors for prompting on screen in human readable variables. These will be set globally
# and can be can be used by in echo statements to modify the color of the message. 
# Examples:  $YELLOW, $RED, $ENDCOLOR (reset), $GREEN, $BLUE
function set_colors () {
	YELLOW="\033[1;33m"
	RED="\033[0;31m"
	ENDCOLOR="\033[0m"
	GREEN="\033[0;32m"
	BLUE="\033[0;34m"
	dark0_hard="#1D2021"
        dark0="#282828"
        dark0_soft="#32302F"
        dark1="#3c3836"
        dark2="#504945"
        dark3="#665c54"
        dark4="#7C6F64"
        gray_245="#928374"
        gray_244="#928374"
        light0_hard="#FB4934"
        light0="#FBF1C7"
        light0_soft="#F2E5BC"
        light1="#EBDBB2"
        light2="#D5C4A1"
        light3="#BDAE93"
        light4="#A89984"
        bright_red="#FB4934"
        bright_green="#B8BB26"
        bright_yellow="#FABD2F"
        bright_blue="#83A598"
        bright_purple="#D3869B"
        bright_aqua="#8EC07C"
        bright_orange="#FE8019"
        neutral_red="#CC241D"
        neutral_green="#98971A"
        neutral_yellow="#D79921"
        neutral_blue="#458588"
        neutral_purple="#B16286"
        neutral_aqua="#689D6A"
        neutral_orange="#D65D0E"
        faded_red="#9D0006"
        faded_green="#79740E"
        faded_yellow="#B57614"
        faded_blue="#076678"
        faded_purple="#8F3F71"
        faded_aqua="#427B58"
        faded_orange="#AF3A03"
}





# Function to ensure administrative privileges such that system wide settings 
# or configuration may be done. This function will make the script call itself 
# with sudo if the user ID is not 0 e.g. root.
function ensure_admin () {
	[ "$UID" -eq 0 ] || echo -e $YELLOW "This script needs administrative access..." $ENDCOLOR
	[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"
}






function set_install_command () {
	# add global install command for portability and convenience
	# If you need to use this script in an rpm based system you could modify the install
	# command here to suit dnf, yum, zypper... By default packages of patternd that do not
	# match should be skipped. Use "export option" so child processes also see the variiables.
        if [[ "$OSTYPE" == "linux-gnu" ]]; then
	        if hash yum 2>/dev/null; then
		        echo -e $YELLOW "Setting install options for YUM" $ENDCOLOR
		        export _INSTCMD="yum install -y "
	        elif hash apt 2>/dev/null; then
		        echo -e $YELLOW "Setting install options for DEB" $ENDCOLOR	        
	                export _INSTCMD="apt-get -y -qq --allow-change-held-packages --ignore-missing install"
	                export DEBIAN_FRONTEND=noninteractive
	        elif hash zypper 2>/dev/null; then
	                echo -e $YELLOW "Setting install options for ZYPPER" $ENDCOLOR
		        export _INSTCMD="zypper install -y "
		else
		        echo -e $YELLOW "This system does not seem to have a software managment system" $ENDCOLOR
	        fi

        elif [[ "$OSTYPE" == "freebsd"* ]]; then
                echo "Free BSD is currently unsupported... "
                export _INSTCMD="echo I dont know how to install suff on FreeBSD!"
        else
               echo "I have no Idea what this system is"
                export _INSTCMD="echo Whatever!"
        fi
}






# Function to enable system firewall and add a given rule. 
function enable_firewall () {
	# Enable firewall in Ubuntu systems
	if hash ufw 2>/dev/null; then
			echo -e $YELLOW "Configure Firewall:" $ENDCOLOR
			ufw enable && ufw allow ssh
	else
			echo UFW not present on this system...
	fi
}





# Function to ease and make consistent the downloading of the non repository packages and
# install them. This function presently only works with apt. This should be expanded to include
# RPM packages as well. 
# First parameter is the URL, second is the name of the deb, to bypass version
# naming issues, use wildcards like skype*.deb
function dl ()
{
	if [ -z "$_ERRLOGFILE" ]; then $_ERRLOGFILE=$0.log ; else echo "Logfile is set to: '$_ERRLOGFILE'"; fi
	if [ -z "$_LOGFILE" ]; then $_LOGFILE=$0.log ; else echo "Logfile is set to: '$_LOGFILE'"; fi
	echo  "   - geting package $2 ..."
	wget -P /var/apt/cache/archives/ $1 1>>$_LOGFILE 2>>$_ERRLOGFILE
	echo "    - Installing package $2 ..."
	dpkg -i /var/apt/cache/archives/$2 1>>$_LOGFILE 2>>$_ERRLOGFILE
	echo "    - Installing dependencies for $2..."
	apt-get -f install -y -qq --allow-change-held-packages 1>>$_LOGFILE 2>>$_ERRLOGFILE
}





# Function to check and see if the system software managment is available. In some cases 
# the sofware managment system may be in use. Should this be the case, this function will
# wait undill the system is free for use. 
# TODO: Add support for fedora, Centos, SuSE.
function SofwareManagmentAvailabilityCHK ()
{
	echo ""
        echo -e $YELLOW"--- Checking if software maintenance system is available:" $ENDCOLOR
        i=0
        tput sc
        while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
            case $(($i % 4)) in
                0 ) j="-" ;;
                1 ) j="\\" ;;
                2 ) j="|" ;;
                3 ) j="/" ;;
            esac
            tput rc
            echo -en "\r[$j] Waiting for other software managers to finish..."\
            ...
            echo " " 
            sleep 0.5
            ((i=i+1))
        done
}





# Function to simplify updating system completely. At present this function simply 
# uses apt but should be modified to update RPM if that is used on the system. 
function up2date ()
{
        if hash yum 2>/dev/null; then
	        # Ensure that the expected variables are defined.
	        if [ -z "$_ERRLOGFILE" ]; then $_ERRLOGFILE=$0.log ; else echo "     Logfile is set to: '$_ERRLOGFILE'"; fi
	        if [ -z "$_LOGFILE" ]; then $_LOGFILE=$0.log ; else echo "     Logfile is set to: '$_LOGFILE'"; fi
	        yum update -y 1>>$_LOGFILE 2>>$_ERRLOGFILE 
        elif hash apt 2>/dev/null; then
	        # Ensure that the expected variables are defined.
	        if [ -z "$_ERRLOGFILE" ]; then $_ERRLOGFILE=$0.log ; else echo "     Logfile is set to: '$_ERRLOGFILE'"; fi
	        if [ -z "$_LOGFILE" ]; then $_LOGFILE=$0.log ; else echo "     Logfile is set to: '$_LOGFILE'"; fi
	        echo -e $YELLOW"--- Running up2date function:" $ENDCOLOR
	        echo "--- Refreshing Software repositories; this may take a minute..."
	        apt-get update 1>>$_LOGFILE 2>>$_ERRLOGFILE
	        echo "--- Installing System Updates; this may take a minute..."
	        apt-get dist-upgrade -y -qq --allow-change-held-packages --ignore-missing 1>>$_LOGFILE 2>>$_ERRLOGFILE
	        echo "--- Cleaning up unused software; this may take a minute..."
	        apt-get autoremove -y 1>>$_LOGFILE 2>>$_ERRLOGFILE 
        elif hash zypper 2>/dev/null; then
        	# Ensure that the expected variables are defined.
	        if [ -z "$_ERRLOGFILE" ]; then $_ERRLOGFILE=$0.log ; else echo "     Logfile is set to: '$_ERRLOGFILE'"; fi
	        if [ -z "$_LOGFILE" ]; then $_LOGFILE=$0.log ; else echo "     Logfile is set to: '$_LOGFILE'"; fi
                return zypper up 1>>$_LOGFILE 2>>$_ERRLOGFILE 
	else
	        return 3
        fi
}





# Function to check if a piece of software is installed. This function will first check
# if the package manager is deb, zypper or rpm, and then take one parameter passed
# and evauate if a software package by that name is installed. This function
# will return a "0" or "1" return based on the package managers return code.
# Call this function by: 
# is_software_package_installed "package name" 
#                 or 
# is_software_package_installed "$1" if calling this function from a script
# or another function receiving a parameter.
#
function is_software_package_installed () 
{
        if hash yum 2>/dev/null; then
	        rpm -q "$1" > /dev/null 2>&1 && return 0 || return 1
        elif hash apt 2>/dev/null; then
	        dpkg -l "$1" 2>/dev/null |tail -1 |grep "ii  $1" > /dev/null 2>&1 && return 0 || return 1
        elif hash zypper 2>/dev/null; then
                zypper se "$1" > /dev/null 2>&1 && return 0 || return 1
	else
	        return 3
        fi

}


	

# Function to chek if a package is available in whetever repository, and 
# if there return a "0" and if not return a "1" or a "3" if there is no recognizable 
# package manager found. the function expects the name of the package 
# to be a parameter passed to this fuction. Call this function by: 
# is_software_package_available "package name" 
#                 or 
# is_software_package_available "$1" if calling this function from a script
# or another function receiving a parameter.
#
# Supported base distributions: Fedora . SuSE . Debian
function is_software_package_available () 
{
        if hash yum 2>/dev/null; then
	        yum list available "$1" &> /dev/null && return 0 || return 1
        elif hash apt 2>/dev/null; then
                apt -qq list "$1" 2>/dev/null | grep -q "$1" && return 0 || return 1
        elif hash zypper 2>/dev/null; then
                return zypper info "$1" &> /dev/null && return 0 || return 1
	else
	        return 3
        fi

}




# Function to simplify the installation of software by including all display and 
# installation logic for a given software provider. This should be expanded to include flatpack
# snap for example. It should be the same consistent way no matter flavor of Linux. 
# This function uses the "$_INSTCMD" to install software. "$_INSTCMD" is defined separatley and could 
# be an RPM or deb string, or even snap or flatpack. A preference order between package system and
# snap or flatpack use. 
function InstallSoftwareFromRepo ()
{
        # make some decent display terminal Graphics...
        PAD="--------------------------------------------------"
	LINE=$(printf "%s %s" "$@" "$PAD" | cut -c 1-${#PAD})
	# Test if package name is installed, if not then...
        if ! is_software_package_installed "$@"; then
                if is_software_package_available   "$@"; then
                    echo -ne "--- Installing "$LINE" ":" "\ & $_INSTCMD "$@" >>$0.log 2>&1 && printf "%b%-6s%b [ \xE2\x9C\x94 ] $GREEN OK!$ENDCOLOR   \n" ||printf "%b%-6s%b [ ! ] $RED FAILED $ENDCOLOR  \n"
                else
                    echo -ne "--- Installing "$LINE" ":" "\ && printf "%b%-6s%b [ \xE2\x9C\x94 ] $YELLOW NOT AVAILABLE... $ENDCOLOR  \n"
                fi
        else
            echo -ne "--- Installing "$LINE" ":" "\ && printf "%b%-6s%b [ \xE2\x9C\x94 ]  $YELLOW Allready INSTALLED...$ENDCOLOR    \n"
        fi

}




# Function to check that a piece of software is installed and if not install it.
# Works for apt based systems currently. The function will take a parameter that is expected to
# match the softwre command line name or rather the name of the package. This should get
# updated to also check and install from snap and flatpack. 
function check_dependencies () {
        #---------------------------------------------------------------
        echo "Checking for script dependencies and install if not there..."
        #---------------------------------------------------------------
            if is_software_package_installed $1 ; then
                echo -e $GREEN"I found that $1 is present on this system... thankyou for that! " $ENDCOLOR
            else
                echo -e $YELLOW"You seem to have no $1... I will try to get it... " $ENDCOLOR
                $_INSTCMD $1
                    if [ $? != 0 ];
                    then
                        echo -e $RED "That install didn't work out so well." 
                        echo -e "Please manually try to add the software since I couldn't do it." $ENDCOLOR
                        exit
                    fi
                echo "OK Done! Continuing..."
            fi
}



# Function to simply display that the functions have been loaded when this function library has been called.
function notice_rtd_loaded ()
{
        echo -e $GREEN "RuntimeData function support is loaded in this script." $ENDCOLOR

}



# Function to list all functions loaded... for debugging purposes.
function debug_list_loaded_functions ()
{
	echo -e $BLUE "RTD Functions Loaded:"
	declare -F | awk '{print $NF}' | sort | egrep -v "^_" 
}



# make prompt colors avaiable to any script that includes this function lbrary.
set_colors
notice_rtd_loaded 



