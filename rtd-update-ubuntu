#!/bin/bash
#
#	RTD Ubuntu + derivatives software update script
#   	Stephan S. Särö, Sweden
#	Nate B. Buffalo Center, IA
#
# Version 1.10
#
# This system configuration and installation script was originally developed
# for RuntimeData, a small OEM in Buffalo Center, IA. The purpose of the script
# was to install and configure Ubuntu and Zorin OS PC's. This OEM and store nolonger
# exists as its owner has passed away. This script is shared in the hopes that
# someone will find it usefull.
#
# The purpose of this script is to update installed software from reopositories.
#
###########################################################################
##                                                                       ##
##                       Set Environment                                 ##
##                                                                       ##
###########################################################################
#
# Set colors for prompting on screen.
	YELLOW="\033[1;33m"
	RED="\033[0;31m"
	ENDCOLOR="\033[0m"
	GREEN="\033[0;32m"
	BLUE="\033[0;34m"

# Ensure administrative privileges.
[ "$UID" -eq 0 ] || echo -e $YELLOW "This script needs administrative access..." $ENDCOLOR
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# get parameter if this script was called with one... 
if [ "$1" == "update" ]; then 
       	INSTRUCTION=update_me
fi

if [ "$1" == "config" ]; then 
       	INSTRUCTION=config_me
fi


###########################################################################
##                                                                       ##
##                         Functions                                     ##
##                                                                       ##
###########################################################################
#

function check.dependencies ()
{
echo -e $YELLOW $0
echo "Checking for script dependencies and install if not there..."
    if hash $1 2>/dev/null; then
        echo "I found that $1 is present on this system... thankyou for that! "
    else
        echo -e $RED "You seem to have no $1... I will try to get it... "
        apt install $1 -y
            if [ $? != 0 ];
            then
                echo "That install didn't work out so well."
                echo "Please manually try to add the software since I couldn't do it."
                exit
            fi
        echo -e $ENDCOLOR
        echo "OK Done! Continuing..."
    fi
}

function deb_software_task ()
{
	log_item "running deb_software_task with parameters $@"
        # make some decent display terminal graphics...
        PAD="--------------------------------------------------"
	LINE=$(printf "%s %s" "$@" "$PAD" | cut -c 1-${#PAD})
	echo -ne "--- Executing "$LINE"":""\ & $@ >>$0.log 2>&1 && printf "%b%-6s%b [ \xE2\x9C\x94 ] $GREEN OK!$ENDCOLOR   \n" ||printf "%b%-6s%b [ ! ] $RED FAILED $ENDCOLOR  \n"

}

function log_item ()
{
DATE=$(date '+%d/%m/%Y %H:%M:%S');
echo "$DATE --- : $@" >> $0.log
}

function update_me ()
{
	# Documentation: Paths and the such... 
	# "# arguments called with ---->  ${@}     "
	# "# \$1 ---------------------->  $1       "
	# "# \$2 ---------------------->  $2       "
	# "# path to me --------------->  ${0}     "
	# "# parent path -------------->  ${0%/*}  "
	# "# my name ------------------>  ${0##*/} "
        	rm $0.bak
		mv $0 $0.bak
                wget  --show-progress https://github.com/vonschutter/RTD-Build/raw/master/${0##*/} -P ${0%/*} 
                chmod +x $0
}

function config_me ()
{
 echo "::!::"
}


###########################################################################
##                                                                       ##
##                        Execute updates                                ##
##                                                                       ##
###########################################################################
#
#

# Execute the fist instruction passed to this script... 
if [ ! -z $INSTRUCTION ]; then
	log_item The instruction $INSTRUCTION was given... 
	$INSTRUCTION
	exit
else
	log_item No instructions passed to $0... 
fi

echo -e $YELLOW "Updating installed software..." $ENDCOLOR
# Updating software managed by distributin speciffic software manager...
	deb_software_task apt-get update
	UPGRADABLE=$(LANG=C apt-get upgrade -s |grep -P '^\d+ upgraded'|cut -d" " -f1)
	[ "$UPGRADABLE" -eq 0 ] && echo "--- $UPGRADABLE packages that need updates; Skipping update task... " || deb_software_task apt-get upgrade -y
	deb_software_task apt-get autoremove -y

# updating snaps if snap is present on the system... 
if hash snap 2>/dev/null; then
	  deb_software_task snap refresh
	else 
	  echo "--- snap software is not present on this system... skipping..."
	fi

# updating flatpacks if flatpack is present on system... 	
if hash flatpack 2>/dev/null; then
	  deb_software_task flatpack update
	else 
	  echo "--- flatpack software is not present on this system... skipping..."
	fi


###########################################################################
##                                                                       ##
##                          Versions                                     ##
##                                                                       ##
###########################################################################
#




#END
