#
#::                     S O F T W A R E    R E C I P I E S 
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:: Author(s):   	SLS, KLS, NB.  Buffalo Center, IA & Avarua, Cook Islands
#:: Version 1.01
#::
#::
#::	Purpose: To define how software is added in one place. 
#::		 Software may be downloaded and installed manually, or via package manager or snaps. 
#::		 Configuration items are also defined here. 
#::	Usage: call this file using the "source" statment in bash. Then simply invoke the relevant recipe (funclion)
#::
#::	This script is shared in the hopes that
#::	someone will find it usefull.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#	NOTE:	This terminal program is written and documented to a very high degree. The reason for doing this is that
#		these apps are seldom changed and when they are, it is usefull to be able to understand why and how 
#		things were built. Obviously, this becomes a useful learning tool as well; for all people that want to 
#		learn how to write admin scripts. It is a good and necessary practice to document extensively and follow
#		patterns when building your own apps and config scripts. Failing to do so will result in a costly mess
#		for any organization after some years and people turnover. 
#
#		As a general rule, we prefer using functions extensively because this makes it easier to manage the script
#		and facilitates several users working on the same scripts over time.
# 
#
#	RTD admin scrips are placed in /opt/rtd/scripts. Optionally scripts may use the common
#	functions in _rtd_functions and _rtd_recipies. 
#	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems. 
#	  _rtd_recipies  -- contain software installation and configuration "recipies". 
#	Scripts may also be stand-alone if there is a reason for this. 
#
#	Taxonomy of this script: we prioritize the use of functions over monolithic script writing, and proper indentation
#	to make the script more readable. Each function shall also be documented to the point of the obvious.
#	Suggested function structure per google guidelines:
#
#	function_name () {
#		# Documentation and comments... 
#		...code...
#	}
#
#	We also like to log all activity, and to echo status output to the screen in a frienly way. To accomplish this,
#	the table below may be used as appropriate: 
#
#				OUTPUT REDIRECTION TABLE
#
#		  || visible in terminal ||   visible in file   || existing
#	  Syntax  ||  StdOut  |  StdErr  ||  StdOut  |  StdErr  ||   file   
#	==========++==========+==========++==========+==========++===========
#	    >     ||    no    |   yes    ||   yes    |    no    || overwrite
#	    >>    ||    no    |   yes    ||   yes    |    no    ||  append
#	          ||          |          ||          |          ||
#	   2>     ||   yes    |    no    ||    no    |   yes    || overwrite
#	   2>>    ||   yes    |    no    ||    no    |   yes    ||  append
#	          ||          |          ||          |          ||
#	   &>     ||    no    |    no    ||   yes    |   yes    || overwrite
#	   &>>    ||    no    |    no    ||   yes    |   yes    ||  append
#	          ||          |          ||          |          ||
#	 | tee    ||   yes    |   yes    ||   yes    |    no    || overwrite
#	 | tee -a ||   yes    |   yes    ||   yes    |    no    ||  append
#	          ||          |          ||          |          ||
#	 n.e. (*) ||   yes    |   yes    ||    no    |   yes    || overwrite
#	 n.e. (*) ||   yes    |   yes    ||    no    |   yes    ||  append
#	          ||          |          ||          |          ||
#	|& tee    ||   yes    |   yes    ||   yes    |   yes    || overwrite
#	|& tee -a ||   yes    |   yes    ||   yes    |   yes    ||  append
#
#	Our scripts are also structured in to three major sections: "settings", "functions", and "execute". 
#	Settings, contain configurable options for the script. Functions, contain all functions. Execute, 
#	contains all the actual logic and flow control of the script. 
#
#
#
# 	*		--- Installing software from the snap repository is prefferred --- 		*
#
# Snap is a software deployment and package management system developed by Canonical for the Linux operating system. 
# The packages, called snaps, and the tool for using them, snapd, work across a range of Linux distributions 
# allowing distribution-agnostic upstream software packaging. Snap application packages of software are self-contained 
# and work across a range of Linux distributions. This is unlike traditional Linux package  management approaches, 
# like APT or YUM, which require specifically adapted packages for each Linux distribution therefore adding delay between 
# application development and its deployment for end-users. 
#
# Supported distributions: 
# Arch Linux, CentOS, Debian, Fedora, Solus, Manjaro Linux, Linux Mint, OpenEmbedded, Raspbian, OpenWrt and openSUSE. 
#
# Security:
# Snaps are also contained from a security point of view and only have the access relly needed on a system. The user may
# add additional access descressionally. 
# 
# 	*	--- Installing software from the flathub repository is a secondary preferrence ---      *
#
# Flatpak (formerly xdg-app) is a software utility for software deployment and package management for Linux. It is advertised 
# as offering a sandbox environment in which users can run application software in isolation from the rest of the system.
# Applications using Flatpak need permissions to have access to Bluetooth, sound (with PulseAudio), network, files, etc., 
# permissions that are defined by the maintainer of the Flatpak and can be controlled (added or removed) by users on their 
# system.Flatpak was developed as part of the freedesktop.org project (formerly known as X Desktop Group or XDG) and was 
# originally called xdg-app.
#
# Flathub, a repository (or remote source in the Flatpak terminology) that is located at flathub.org, has become the de facto 
# standard for getting applications packaged with Flatpak.[9] Packages are added to it by both the Flathub administrators and 
# the developers of the programs themselves (though the admins have stated their preference for developer-submitted apps).
# Although Flathub is the de facto source for applications packaged with Flatpak, Flatpak can work independently of Flathub;
# it is possible to host a remote and access to remotes that are totally independent of Flathub.
#
#	*	---       Installing software from native distribution repositories  ----		*
#
# A Linux repository is a storage location from which your system retrieves and installs OS updates and applications. 
# Each repository is a collection of software hosted on a remote server and intended to be used for installing and updating 
# software packages on Linux systems. When you run commands such as “sudo apt update” or “sudo apt upgrade”, you may be pulling 
# package information and package updates from a number of repositories. 
# 
# For more information on package managers see: https://en.wikipedia.org/wiki/Package_manager
#
#	*	---       PREFFERRED Software install (Security + Control)           ----		*
# 
#  CAPABILITY TABLE:
# +-----------------------------------------------------+-----------------------------------+-----------------------------------+----------------------+
# | Features                                            | Snap                              | Flatpak                           | AppImage             |
# +-----------------------------------------------------+-----------------------------------+-----------------------------------+----------------------+
# | Permission Controls Toggles                         | Yes                               | Yes                               | No                   |
# | Sandboxing Support                                  | Yes                               | Yes                               | Yes                  |
# | Sandboxing Mandatory                                | Yes                               | Yes                               | No                   |
# | App Portability                                     | Yes                               | Yes                               | No                   |
# | Native Theme Support                                | Yes (with caveats)                | Yes (with caveats)                | Yes (with caveats)   |
# | Support for Bundled Libraries                       | Yes                               | Yes                               | Yes                  |
# | Fully Contained Single Executable Support           | No                                | No                                | Yes                  |
# | Online App Store                                    | Yes                               | Yes                               | Yes                  |
# | Multi-version Parallel Apps Support                 | Yes                               | Yes                               | Yes                  |
# | Automatic Updates                                   | Yes                               | Yes                               | Yes(with caveats)    |
# | Support for Chrome OS (through Crostini containers) | Yes                               | Yes                               | Yes                  |
# | App Size                                            | Can vary but higher than AppImage | Can vary but higher than AppImage | Lowest               |
# | Number of Applications Available in the App Store   | Highest                           | Lowest                            | Somewhere in between |
# | Plugins for Desktop App Store Software              | Yes                               | Yes                               | No                   |
# +-----------------------------------------------------+-----------------------------------+-----------------------------------+----------------------+
#
# 
#
# A new way to manage native packages on Linux PackageKit. PackageKit is a free and open-source suite of software 
# applications designed to provide a consistent and high-level front end for a number of different package management systems.
# PackageKit simplifies how to manage software on several different linux distribution and may even be available on BSD flavors. 
#
# TEMPLATE: For adding a new manu entry for a singel package or bundle of software:
#
# recipe_Bundle_descriptive_name () {
# 			# function documentaton... 
# 			# Echo to terminal:
# 			write_error		: Prints an error message to terminal in RED
# 			write_host 		: Prints a message to the terminal w. a choice of color
# 			write_information 	: Prints a message to the terminal in BLUE
# 			write_status		: Prints a message to the terminal in GREEN
# 			write_warning 		: Prints a message to the terminal in YELLOW
#
# 			# Install software with distribution package manager (Agnostic)
# 			for i in package1 package2 package3 ; do
# 			     InstallSoftwareFromRepo $i
# 			done
#
# 			# Install faltpacks:
# 			ensure_flatpack_package_managment
# 			snap install package-name
#
# 			# Install snap packages:
# 			ensure_snap_package_managment
# 			flatpack install 
#
# 			# Check a dependency:
# 			check_dependencies package-name
# }

# Add several software items that are almost alwasys used 
# in one way or another... 




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::: 	 ____       _   _   _                                ::::::::::::::::::::::
#:::::::::::::: 	/ ___|  ___| |_| |_(_)_ __   __ _ ___                ::::::::::::::::::::::
#:::::::::::::: 	\___ \ / _ \ __| __| | '_ \ / _` / __|               ::::::::::::::::::::::
#:::::::::::::: 	 ___) |  __/ |_| |_| | | | | (_| \__ \               ::::::::::::::::::::::
#:::::::::::::: 	|____/ \___|\__|\__|_|_| |_|\__, |___/               ::::::::::::::::::::::
#::::::::::::::                            |___/                             ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


# Set account on GIT Hub to fetch items from. 
GIT_Profile=${GIT_Profile:-vonschutter}







#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::         _____                  _   _                         ::::::::::::::::::::::
#::::::::::::::		|  ___|   _ _ __   ___| |_(_) ___  _ __  ___         ::::::::::::::::::::::
#::::::::::::::		| |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|        ::::::::::::::::::::::
#::::::::::::::		|  _|| |_| | | | | (__| |_| | (_) | | | \__ \        ::::::::::::::::::::::
#::::::::::::::		|_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/        ::::::::::::::::::::::
#::::::::::::::                                                              ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



recipe_Bundle_Common_Apps () {
		# Add several software items that are almost alwasys used 
		# in one way or another... 
			echo -e $YELLOW"--- Adding some minor congiguration items for productivity..." $ENDCOLOR
			for i in diodon polari filezilla tilix
			do
			     InstallSoftwareFromRepo $i
			done

			# Ensure Flatpack support
			check_dependencies flatpak

			# Ensure Snap support
			check_dependencies snapd

			# Configure Desktop software managers depending on desktop used
			case "$DESKTOP_SESSION" in
				plasma )
					check_dependencies plasma-discover
					check_dependencies plasma-discover-backend-flatpak
					check_dependencies plasma-discover-backend-snap
				;;
				* )
					snap install snap-store
					check_dependencies gnome-software
					check_dependencies gnome-software-plugin-flatpak
					check_dependencies gnome-software-plugin-snap
				;;
			esac
}



recipe_Remove_non_western_latin_fonts () {
	rtd_oem_remove_non_western_latin_fonts
}


recipe_Brave_Browser () {
		# This function will add the vendor maintained repository and install the software
		# using the distribution speciffic installers.
		write_information "--- Installing Brave Browser directly from vendor repo..." 
		if cat "/etc/os-release" | grep "debian" ; then
			apt install -y apt-transport-https curl gnupg
			curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
			echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | tee /etc/apt/sources.list.d/brave-browser-release.list
			apt update
			apt install brave-browser -y
			return $?
		elif cat "/etc/os-release" | grep "fedora" ; then
			dnf install dnf-plugins-core -y
			dnf config-manager --add-repo https://brave-browser-rpm-release.s3.brave.com/x86_64/
			rpm --import https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
			dnf install brave-browser -y
			return $?
		elif  cat "/etc/os-release" | grep "suse" ; then
			zypper install curl -y
			rpm --import https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
			zypper addrepo https://brave-browser-rpm-release.s3.brave.com/x86_64/ brave-browser
			zypper install brave-browser -y
			return $?
		else
			# Try for any distro using apt... SUSE has a shortcut for a simple apt, wich will mess this up if checked first... 
			if hash apt-get ; then
				apt install -y apt-transport-https curl gnupg
				curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
				echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | tee /etc/apt/sources.list.d/brave-browser-release.list
				apt update
				apt install brave-browser -y
				return $?
			else
				echo "${FUNCNAME[0]}: Neither debian, fedora, or suse base distros could be found; NOT installing brave."
				return 1
			fi
		fi
}



recipe_Vivaldi_Browser (){
		# # This function uses the RTD function "dl" to download a distribution speciffic package directly
		# # from the vendors website. It will work until the vendor removes the exact file... 
		# echo -e $YELLOW"--- Installing Vivaldi directly from vivaldi.com..." $ENDCOLOR
		write_information "--- Installing Brave Browser directly from vendor repo..." 
		if cat "/etc/os-release" | grep "debian" ; then
			apt -y install wget gnupg2 software-properties-common
			wget -qO- https://repo.vivaldi.com/archive/linux_signing_key.pub | sudo apt-key add -
			echo 'deb https://repo.vivaldi.com/archive/deb/ stable main' | sudo tee /etc/apt/sources.list.d/vivaldi.list
			apt update
			apt install vivaldi-stable -y
			return $?
		elif cat "/etc/os-release" | grep "fedora" ; then
			dnf install dnf-utils -y
			dnf config-manager --add-repo https://repo.vivaldi.com/archive/vivaldi-fedora.repo
			dnf install vivaldi-stable -y
			return $?
		elif  cat "/etc/os-release" | grep "suse" ; then
			zypper install curl
			dl https://downloads.vivaldi.com/stable/vivaldi-stable-3.5.2115.81-1.x86_64.rpm 2>>$_ERRLOGFILE
			return $?
		else 
			echo "${FUNCNAME[0]}: Neither debian, fedora, or suse base distros could be found; NOT installing vivaldi."
			return 1
		fi
}


recipe_Windows_Subsystem_for_Linux (){
			InstallSoftwareFromRepo wine
}


recipe_Simplenote (){
			# some small simple apps you will like... 
			check_dependencies snapd
			# A simple to use not taking app that auto syncs with the same app on any device.
			snap install simplenote 2>>$_ERRLOGFILE

}



recipe_DOS_VM_for_Classic_Games (){
			# some small simple apps you will like... 
			check_dependencies snapd
			# A small app that allows you to use your old DOS software. 
			snap install dosbox-x  2>>$_ERRLOGFILE

}



recipe_Bundle_Screenshot_Tools (){
			# some small simple apps you will like... 
			check_dependencies snapd
			# Feature rich screenshot tool and screenshot annotation tool. Great for support.
			snap install screencloud 
			snap install flameshot

}



recipe_Bundle_OEM_restricted_fonts () {
			# Download and install Trutype font pack... these are propietary and require passphrase to unlock. 
			wget --show-progress "https://www.dropbox.com/s/7n5dgltnddtrs9j/True_Type_Font_Pack.7z" -P /opt/rtd/cache/
			mkdir -p /usr/share/fonts/truetype/oem
			check_dependencies p7zip-full
			7z e -y /opt/rtd/cache/True_Type_Font_Pack.7z -o/usr/share/fonts/truetype/oem/
}



recipe_Bundle_Secure_Communication () {
			ensure_snap_package_managment
			snap install signal-desktop 
			snap install telegram-desktop 
}



recipe_Bundle_Video_Editing () {
			ensure_snap_package_managment
			snap install vidcutter 
			snap install handbrake-jz
			snap install matroska-tools
			snap install kdenlive
			snap install shotcut --classic
			snap install obs-studio
				snap connect obs-studio:alsa
				snap connect obs-studio:audio-record
				snap connect obs-studio:avahi-control
				snap connect obs-studio:camera
				snap connect obs-studio:jack1
				snap connect obs-studio:kernel-module-observe
				snap connect obs-studio:avahi-control
				snap connect obs-studio:kernel-module-observe
					if check_dependencies v4l2loopback-dkms ; then 
						if check_dependencies v4l2loopback-utils ; then 
							echo "options v4l2loopback devices=1 video_nr=13 card_label='OBS Virtual Camera'    exclusive_caps=1" | sudo tee /etc/modprobe.d/v4l2loopback.conf
							echo "v4l2loopback" | sudo tee /etc/modules-load.d/v4l2loopback.conf
							sudo modprobe -r v4l2loopback
							sudo modprobe v4l2loopback devices=1 video_nr=13 card_label='OBS Virtual Camera' exclusive_caps=1
						fi
					fi
				snap connect obs-studio:removable-media
				snap connect obs-studio:raw-usb
				snap connect obs-studio:joystick
				sudo snap install blender --classic
			
			ensure_flatpack_package_managment
			flatpak install flathub org.openshot.OpenShot --noninteractive -y 
			flatpak install flathub io.github.jliljebl.Flowblade --noninteractive -y 
}




recipe_Developer_Software (){
			write_status "--- Adding Developer Software Apps: IDE Tools and Compilers..." 
			for i in build-essential git
			do
			     InstallSoftwareFromRepo $i
			done
			check_dependencies snapd
			snap install atom --classic  
			snap install gitkraken --classic 
			sudo snap install code --classic 
}



recipe_Bundle_Compression_Tools (){
			write-status "--- Adding Comression Toolset (zip, 7zip rar etc.)..."
			for i in p7zip-full p7zip-rar rar zip 
			do
			     InstallSoftwareFromRepo $i
			done
}



recipe_Bundle_Curated_Top_Games (){
			# Install games from native repositories... 
			write_status "--- Adding Selection of Quality Games..." 
						
			# --- Install games available in SNAP repository --- 
			check_dependencies snapd
			for i in supertuxkart 0ad warzone2100 supertuxkart marsshooter mc-installer
			do
			     snap install $i
			done
			
			# --- Install games available in Flathub repository and not at Snapcrafters --- 
			check_dependencies flatpak
			
			# Add the flatpack repository if it down not already exist:
			flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
			
			# Add requested games:
			flatpak install flathub com.moddb.TotalChaos -y	--noninteractive
			flatpak install flathub com.viewizard.AstroMenace -y --noninteractive
			flatpak install flathub io.github.EndlessSky.endless-sky -y --noninteractive
			flatpak install flathub com.albiononline.AlbionOnline -y --noninteractive
			flatpak install flathub com.endlessnetwork.aqueducts -y --noninteractive
			flatpak install flathub de.billardgl.Billardgl -y --noninteractive
			flatpak install flathub org.naev.Naev -y --noninteractive
			
			# --- Install games available in repository only --- 
			for i in dreamchess armagetronad mesa-utils assaultcube openarena
			do
			     InstallSoftwareFromRepo $i
			done
			# Install Valves Steam Client for gaming. 
			InstallSoftwareFromRepo steam
			if [ $? != 0 ]; then 
				if hash rpm &>/dev/null; then
					dl https://steamcdn-a.akamaihd.net/client/installer/steam.rpm
				elif hash apt &>/dev/null; then
				
					dl https://steamcdn-a.akamaihd.net/client/installer/steam.deb 
				else
					echo -e $RED
					echo "I am not sure how to find the Steam download for $(lsb_release -sd) "
					echo "Please try to download it manually and instrtall it from the website:"
					echo "https://store.steampowered.com/about/"
					echo -e $ENDCOLOR
				fi
			fi
}





recipe_Bundle_Admin_Tools (){
			write_status "--- OEM System Administrative Tools..."
			# Loop through each item in this list of software and perform an install 
			# using the relevant packaging system. 
			for i in terminix nmap synaptic ssh gparted sshfs htop iftop nethogs vnstat ifstat dstat nload glances bmon \
				vim vim-scripts gufw variety remmina remmina-plugin-exec remmina-plugin-secret remmina-plugin-vnc remmina-plugin-nx  \
				remmina-plugin-spice remmina-plugin-xdmcp remmina-plugin-rdp remmina-plugin-telepathy  

			do
			     InstallSoftwareFromRepo $i
			done

}



recipe_Java_Runtime (){
			# Special case for installing Oracle Java...
			echo -e $YELLOW"--- Adding Java JRE..." $ENDCOLOR
			# Add the Oracle Java repository and install the software. 
			# add-apt-repository ppa:linuxuprising/java -y  1>>$_LOGFILE 2>>$_ERRLOGFILE
			# apt-get update  1>>$_LOGFILE 2>>$_ERRLOGFILE
			# echo oracle-java11-installer shared/accepted-oracle-license-v1-2 select true | sudo /usr/bin/debconf-set-selections && \
			# apt install -y oracle-java12-installer    1>>$_LOGFILE 2>>$_ERRLOGFILE
			# apt install -y oracle-java12-set-default  1>>$_LOGFILE 2>>$_ERRLOGFILE
			InstallSoftwareFromRepo default-jre

}



recipe_Bleachbit_System_Cleaner (){
			#Bleachbit
			write_status "--- Bleachbit System Cleaning Tool..." 
			InstallSoftwareFromRepo bleachbit 
}



recipe_Restricted_Fonts_and_Codecs (){
			echo -e $YELLOW"--- Install all the required multimedia codecs..." $ENDCOLOR
			# Auto accept microsoft corefonts eula
			echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | /usr/bin/debconf-set-selections
			for i in libdvdcss2 ffmpeg ubuntu-restricted-extras
			do
			     InstallSoftwareFromRepo $i
			done		
}



recipe_VLC_Universal_Videao_Player (){
			#VLC Media Player
			echo -e $YELLOW"--- Installing VLC Media Player..." $ENDCOLOR
			InstallSoftwareFromRepo vlc
}



recipe_Google_Chrome_Browser (){
			# Special case for installing Google Chrome
			echo -e $YELLOW"--- Installing Google Chrome Browser from google directly..." $ENDCOLOR
			dl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb  1>>$_LOGFILE 2>>$_ERRLOGFILE
}



recipe_Remote_Desktop_by_Team_Viewer (){
			#Teamviewer
			echo -e $YELLOW"--- Installing Teamviewer..." $ENDCOLOR
			dl https://download.teamviewer.com/download/linux/teamviewer_amd64.deb  1>>$_LOGFILE 2>>$_ERRLOGFILE
}



recipe_Remote_Desktop_by_Anydesk () {
			check_dependencies flatpak
			flatpak install flathub com.anydesk.Anydesk --noninteractive -y 
}



recipe_Skype_Messenger (){
			#Skype for Linux
			write_status "--- Installing Skype For Linux..."
			check_dependencies snapd
			snap install skype --classic  2>>$_ERRLOGFILE
}



recipe_Viber_Messenger (){
			check_dependencies snapd
			snap install --edge viber-mtd 
}



recipe_MEGA.nz_Encrypted_Cloud_Storage (){
			# Special case for installing MEGA nz file sync utility (better than Drop Box)...
			write_status "--- Installing MEGA nz file crypto sync utility..." 
			check_dependencies lsb-release

			# Reset & clear variables in case of incomplete cleanup... 
			FILE2GET=
			URL=
			
			if lsb_release -si | grep "Debian" ; then
				URL="https://mega.nz/linux/MEGAsync/$(lsb_release -si)_$(lsb_release -sr).0/amd64/megasync-$(lsb_release -si)_$(lsb_release -sr).0_amd64.deb"
			elif lsb_release -si | grep "Ubuntu" ; then
				URL="https://mega.nz/linux/MEGAsync/xUbuntu_`lsb_release -sr`/amd64/megasync-xUbuntu_`lsb_release -sr`_amd64.deb"
			elif lsb_release -si | grep "openSUSE" ; then
				URL="https://mega.nz/linux/MEGAsync/openSUSE_Leap_15.0/x86_64/megasync-openSUSE_Leap_15.0.x86_64.rpm"
			else
				echo -e $RED
				echo "I am not sure how to find the Mega sync download for $(lsb_release -sd) "
				echo "Please try to download it manually and instrtall it from the website:"
				echo "https://mega.nz/sync"
				echo -e $ENDCOLOR
			fi

			
			# If a known distributio was found and URL set, use "dl" function to install app...
			[[ ! -z "$URL" ]] && dl $URL 1>>$_LOGFILE 2>>$_ERRLOGFILE
}



recipe_Dropbox_Corporate_Cloud_Storage (){
			# Install Dropbox
			write_status "--- Installing Dropbox Cloud Storage Sync..." 
			InstallSoftwareFromRepo nautilus-dropbox
}







recipe_Bundle_Media_Streamers:_Spotify_Wins_Google (){
			write_status "--- Installing Music Players and Audio Software..." 
			check_dependencies snapd
			snap install spotify  2>>$_ERRLOGFILE
			snap install google-play-music-desktop-player  2>>$_ERRLOGFILE
			snap install winds 2>>$_ERRLOGFILE

}



recipe_Bundle_Audio_Tools (){
			write_status "--- Installing Audio Tools Bundle..."
			ensure_snap_package_managment
			snap install picard  2>>$_ERRLOGFILE

}



recipe_Virtualbox (){
			# Install Virtual Box from Oracle. However avoid installing it in a VM, as tis usecase may be counterproductive.
			# NOTE:
			# VirtualBox is a powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as 
			# home use. Not only is VirtualBox an extremely feature rich, high performance product for enterprise 
			# customers, it is also the only professional solution that is freely available as Open Source Software 
			# under the terms of the GNU General Public License (GPL) version 2. See "About VirtualBox" for an introduction.
			# Presently, VirtualBox runs on Windows, Linux, Macintosh, and Solaris hosts and supports a large number 
			# of guest operating systems including but not limited to Windows (NT 4.0, 2000, XP, Server 2003, Vista, Windows 7, 
			# Windows 8, Windows 10), DOS/Windows 3.x, Linux (2.4, 2.6, 3.x and 4.x), Solaris and OpenSolaris, OS/2, and OpenBSD.
			# VirtualBox is being actively developed with frequent releases and has an ever growing list of features, 
			# supported guest operating systems and platforms it runs on. VirtualBox is a community effort backed by a 
			# dedicated company: everyone is encouraged to contribute while Oracle ensures the product always meets professional 
			# quality criteria. 
			# 
			check_dependencies virt-what
			if virt-what ; then 
				# Special case for installing VirtualBox
				echo -e $YELLOW"--- Installing VirtualBox if available..." $ENDCOLOR
				echo virtualbox virtualbox/module-compilation-allowed boolean true | /usr/bin/debconf-set-selections
				echo virtualbox virtualbox/delete-old-modules boolean true | /usr/bin/debconf-set-selections
				# Loop through each item in this list of softwar and perform an install 
				# using the relevant packaging system. 
				for i in virtualbox virtualbox-dkms virtualbox-ext-pack virtualbox-guest-additions-iso 
				do
				InstallSoftwareFromRepo $i
				done
				[[ "$DESKTOP_SESSION" == "plasma" ]] || InstallSoftwareFromRepo virtualbox-qt
				# Ensure that the current user can use USB etc... 			
				if id -nG "$SUDO_USER" | grep -qw "vboxusers"; then
				echo      $SUDO_USER already belongs to vboxusers group
				else
				usermod -G vboxusers -a $SUDO_USER 1>>$_LOGFILE 2>>$_ERRLOGFILE
				fi
			else
				write_warning "This computer is likely a Virtual Macine (VM) and using Virtualbox inside a VM is not reccommended."
			fi
}



recipe_RTD_OEM_Configuration_and_Optimizations (){
			echo "Applying OEM Configuration..."
			#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
			#::::::::::::::                                          ::::::::::::::::::::::
			#::::::::::::::          Desktop Settings                ::::::::::::::::::::::
			#::::::::::::::                                          ::::::::::::::::::::::
			#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
			enable_firewall
			# Power managment profile
			check_dependencies tuned
			systemctl enable --now tuned
			tuned-adm profile balanced

			rtd_oem_check_splash () {
				if -f $1 ; then 
					if cat $1 |grep "-desktop" ; then
						InstallSoftwareFromRepo splash && echo 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"'>> /etc/default/grub
						update-grub
					fi
				fi
			}
			# If this system was built using the RTD process and is debian based, use instructions in said file.
			rtd_oem_check_splash /opt/rtd/log/preseed.cfg

			#Tune to virtual machine guest or tune according to hardware type::
			check_dependencies virt-what
			check_dependencies laptop-detect
			if virt-what ; then 
				echo "This is likely not running in a virtual machine."
				if laptop-detect ; then 
					tuned-adm profile powersave
				else
					tuned-adm profile desktop
				fi
			else 
				tuned-adm profile virtual-guest 
			fi

			# Apply tweaks to the UI based on desktop active
			if  ps -e |grep "gnome-shell"; then
				write_information "Fonud the gnome UI on this system! Adding some customizations..."
				# Configure Gnome for OEM look and feel. This is completely as desired. 
				# These setings will then be copied to the "/etsc/skel" directory where user templates
				# are stored. This will allow new users to get the same themes and settings as the 
				# current user. This should likely only be done right after a PC has been installed
				# otherwise all user configuration settings will be trasferred to any user 
				# subsequently created.  
				# -------------------------------------------------------------------------------------------------------
				# Install Wallpapers and configure Gnome to see them. ...
				RTDCP=/opt/rtd/cache
				echo Downloading Wallpapers:
				echo ---------------------------------------------
				mkdir -p $RTDCP && wget -q --show-progress https://github.com/${GIT_Profile}/RTD-Media/archive/master.zip -P $RTDCP && unzip -q -o $RTDCP/master.zip -d $RTDCP
				rm $RTDCP/master.zip
				pushd $RTDCP && mv -f RTD-Media-master/Wallpaper .. && mv -f RTD-Media-master/Sound .. 
				echo ---------------------------------------------
				mkdir -p /usr/local/share/gnome-background-properties
				DIRECTORY=/opt/rtd/Wallpaper/
				ls $DIRECTORY > lspictures.txt

				# Make a header
				echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
				<!DOCTYPE wallpapers SYSTEM \"gnome-wp-list.dtd\">
				<wallpapers>" > mybackgrounds.xml
				# Registering all pictures in $DIRECTORY

					for i in $DIRECTORY*.jpg $DIRECTORY*.png; do
					echo "<wallpaper>
					<name>$i</name>
					<filename>$i</filename>
					<options>stretched</options>
					<pcolor>#8f4a1c</pcolor>
					<scolor>#8f4a1c</scolor>
					<shade_type>solid</shade_type>
					</wallpaper>" >> mybackgrounds.xml
					done

				# creating the footer
					echo "</wallpapers>" >> mybackgrounds.xml
					sed 's/<name>\/usr\/share\/backgrounds\//<name>/g' mybackgrounds.xml > /usr/local/share/gnome-background-properties/mybackgrounds.xml
					# cp /usr/local/share/gnome-background-properties/mybackgrounds.xml /usr/share/gnome-background-properties/mybackgrounds.xml
					rm mybackgrounds.xml ; rm lspictures.txt

				# Set the default wallpaper... 
					#run_command_in_gnome_user_session gsettings set org.gnome.desktop.background picture-uri file:///opt/rtd/Wallpaper/Wayland.jpg
					run_command_in_gnome_user_session gsettings set org.gnome.desktop.background picture-uri file:///opt/rtd/Wallpaper/Redmond.png
				# -------------------------------------------------------------------------------------------------------
				
				# Special case for Fedora: Add the gnome UI tweak tool... 
				if cat /etc/os-release |grep "Fedora" &>> $_LOGFILE; then
					# Enable the extra repositories in fedora to get access to the espected software.
					InstallSoftwareFromRepo fedora-workstation-repositories 
				fi
				InstallSoftwareFromRepo gnome-tweak-tool
				
				write_information "--- Optimizig look and feel of the desktop for productivity and aestetics..." 

				# Add Some basic extensions...			
				for i in gnome-shell-extensions \
					gnome-shell-extension-appindicator \
					gnome-shell-extension-suspend-button \
					gnome-shell-extension-log-out-button  \
					gnome-shell-extension-multi-monitors \
					gnome-shell-extension-caffeine \
					gnome-shell-extension-gsconnect  \
					gnome-shell-extension-gsconnect-browsers \
					gnome-shell-extension-dash-to-panel \
					gnome-shell-extension-dashtodock 
				do 
					InstallSoftwareFromRepo $i
				done

				# Installing dependencies for themes. If the package name was the same there would not  
				# need for this extra checking, but different distributions have different 
				# names for the same software. Therefore there is a need to check based on what 
				# distro package managemnt is installed. This is easier and likely accurate in most cases.
				# Pop, Ubuntu, Kubuntu, and Debian all use deb packages and name the packages consistently for ex.
				# This will ensure that the sofware is installed so the themes look good...
				if hash apt-get 2>/dev/null ; then
					for i in sassc libcanberra-gtk-module libglib2.0-dev gtk2-engines-murrine gtk2-engines-pixbuf libxml2-utils ; do
						check_dependencies  $i
					done
				elif hash zypper 2>/dev/null ; then
					for i in check_dependencies gtk-murrine-engine gtk2-engines sassc glib2-devel ; do
						check_dependencies  $i 
					done
				elif hash dnf 2>/dev/null ; then
					for i in check_dependencies gtk-murrine-engine gtk2-engines sassc glib2-devel ; do
						check_dependencies  $i 
					done
				elif hash pacman 2>/dev/null ; then
					for i in check_dependencies gtk-engine-murrine gtk-engines sassc; do
						check_dependencies  $i 
					done
				else
					write_error "This option requires a supported package manager on your system (deb, zypper, dnf, pacman). Neiter was found!"
				fi
				
				# Allow themes to be used in snapps...
				check_dependencies snapd

				# Install theme for a smooth mocka experience in UI...
				snap install vimix-themes
					wget -q https://github.com/"${GIT_Profile}"/RTD-Media/raw/master/Themes/vimix-gtk-themes.zip -P /opt/rtd/cache
					wget -q https://github.com/"${GIT_Profile}"/RTD-Media/raw/master/Themes/vimix-icon-themes.zip -P /opt/rtd/cache
					unzip -q -o /opt/rtd/cache/vimix-gtk-themes.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/vimix-gtk-themes-master && ./install.sh && popd
					unzip -q -o /opt/rtd/cache/vimix-icon-themes.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/vimix-icon-theme-master && ./install.sh && popd
					for i in $(snap connections | grep gtk-common-themes:gtk-3-themes | awk '{print $2}'); do sudo snap connect $i vimix-themes:gtk-3-themes; done
				
				# Install theme for previous Apple users... 
				snap install mojave-themes
					wget -q https://github.com/"${GIT_Profile}"/RTD-Media/raw/master/Themes/Mojave-gtk-theme.zip -P /opt/rtd/cache
					wget -q https://github.com/"${GIT_Profile}"/RTD-Media/raw/master/Themes/McMojave-circle.zip -P /opt/rtd/cache
					unzip -q -o /opt/rtd/cache/Mojave-gtk-theme.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/Mojave-gtk-theme-master && ./install.sh && popd
					unzip -q -o /opt/rtd/cache/McMojave-circle.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/McMojave-circle-master && ./install.sh && popd
					for i in $(snap connections | grep gtk-common-themes:gtk-3-themes | awk '{print $2}'); do sudo snap connect $i mojave-themes:gtk-3-themes ; done
				
				# Install basic professional Arc and gnome defaiult theme...
				for i in numix-gtk-theme numix-icon-theme \
					arc-theme \
					adwaita-icon-theme-full\
					adwaita-qt
				do 
					InstallSoftwareFromRepo $i
				done

				# Add a default Icon theme "Arc" fo a clean and crisp proffessional default look. 
				wget https://github.com/"${GIT_Profile}"/RTD-Media/raw/master/Themes/Arc-icon-theme.zip -P /opt/rtd/cache 
				unzip -q -o /opt/rtd/cache/Arc-icon-theme.zip -d /opt/rtd/cache && mv /opt/rtd/cache/Arc-icon-theme /usr/share/icons/Arc

				cat >> gtweak.sh <<-'EOF'
				#!/bin/bash
				# Terminal and Tilix Dark Theme
				gsettings set com.gexperts.Tilix.Settings theme-variant 'dark'
				gsettings set org.gnome.Terminal.Legacy.Settings theme-variant 'dark'
				gsettings set org.gnome.Terminal.Legacy.Profile:/ use-transparent-background true
				gsettings set org.gnome.Terminal.Legacy.Profile:/ background-transparency-percent 50
				gsettings set org.gnome.Terminal.Legacy.Profile:/ default-size-columns 100
				gsettings set org.gnome.Terminal.Legacy.Profile:/ use-theme-transparency false
				gsettings set org.gnome.Terminal.Legacy.Profile:/ scrollback-lines 10000

				mkdir -p ~/.config/rtd
				cat >> ~/.config/rtd/gconf-term-settings.ini <<-'EOF_TERM'
				[org/gnome/terminal/legacy/profiles:]
				default='233cd435-58ea-47cf-bcfa-a16a9ecedb16'
				list=['b1dcc9dd-5262-4d8d-a863-c897e6d979b9', '233cd435-58ea-47cf-bcfa-a16a9ecedb16']

				[org/gnome/terminal/legacy/profiles:/:233cd435-58ea-47cf-bcfa-a16a9ecedb16]
				background-color='rgb(0,0,0)'
				background-transparency-percent=0
				bold-color-same-as-fg=true
				bold-is-bright=true
				cursor-colors-set=false
				foreground-color='rgb(170,170,170)'
				highlight-colors-set=false
				palette=['rgb(0,0,0)', 'rgb(170,0,0)', 'rgb(0,170,0)', 'rgb(170,85,0)', 'rgb(0,0,170)', 'rgb(170,0,170)', 'rgb(0,170,170)', 'rgb(170,170,170)', 'rgb(85,85,85)', 'rgb(255,85,85)', 'rgb(85,255,85)', 'rgb(255,255,85)', 'rgb(85,85,255)', 'rgb(255,85,255)', 'rgb(85,255,255)', 'rgb(255,255,255)']
				use-theme-colors=false
				use-theme-transparency=false
				use-transparent-background=true
				visible-name='Linux'

				[org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9]
				background-color='rgb(0,0,0)'
				background-transparency-percent=15
				default-size-columns=140
				default-size-rows=40
				foreground-color='rgb(170,170,170)'
				use-theme-colors=false
				use-theme-transparency=false
				use-transparent-background=true
				EOF_TERM
				
				# Load terminal default settings...
				dconf load / < ~/.config/rtd/gconf-term-settings.ini

				cat >> ~/.config/rtd/gconf-tilix-settings.ini <<-'EOF_TLX'
				[com/gexperts/Tilix]
				quake-specific-monitor=0
				quake-width-percent=90
				terminal-title-style='small'
				theme-variant='dark'
				warn-vte-config-issue=false

				[com/gexperts/Tilix/profiles]
				list=['2b7c4080-0ddd-46c5-8f23-563fd3ba789d', 'd6401d4b-4b26-42ec-918a-2e7dc977118d', '8000e9d6-6f21-4a4e-a122-ac45607b56f5', '5283b4cf-faa5-4aef-afcd-a29fd5e0335a', '75b21a4c-150c-4f7a-a093-9faaa19626e2', '1824e1f9-3b7e-48d2-b06a-709239d1d6d9']

				[com/gexperts/Tilix/profiles/1824e1f9-3b7e-48d2-b06a-709239d1d6d9]
				background-color='#272822'
				badge-color-set=false
				bold-color-set=false
				cursor-colors-set=false
				foreground-color='#F8F8F2'
				highlight-colors-set=false
				palette=['#272822', '#F92672', '#A6E22E', '#F4BF75', '#66D9EF', '#AE81FF', '#A1EFE4', '#F8F8F2', '#75715E', '#F92672', '#A6E22E', '#F4BF75', '#66D9EF', '#AE81FF', '#A1EFE4', '#F9F8F5']
				use-theme-colors=false
				visible-name='Monokai'

				[com/gexperts/Tilix/profiles/2b7c4080-0ddd-46c5-8f23-563fd3ba789d]
				background-color='#000000000000'
				background-transparency-percent=10
				badge-color='#AC7EA8'
				badge-color-set=true
				bold-color-set=false
				cursor-colors-set=false
				default-size-columns=180
				default-size-rows=40
				dim-transparency-percent=0
				font='Ubuntu Mono 10'
				foreground-color='#EFEFEF'
				highlight-colors-set=false
				palette=['#000000', '#AA0000', '#00AA00', '#AA5400', '#0000AA', '#AA00AA', '#00AAAA', '#AAAAAA', '#545454', '#FF5454', '#54FF54', '#FFFF54', '#5454FF', '#FF54FF', '#54FFFF', '#FFFFFF']
				terminal-title='${id}: ${title}${process}'
				use-system-font=false
				use-theme-colors=false
				visible-name='Linux'

				[com/gexperts/Tilix/profiles/5283b4cf-faa5-4aef-afcd-a29fd5e0335a]
				background-color='#FDF6E3'
				badge-color-set=false
				bold-color-set=false
				cursor-colors-set=false
				foreground-color='#657B83'
				highlight-colors-set=false
				palette=['#073642', '#DC322F', '#859900', '#B58900', '#268BD2', '#D33682', '#2AA198', '#EEE8D5', '#002B36', '#CB4B16', '#586E75', '#657B83', '#839496', '#6C71C4', '#93A1A1', '#FDF6E3']
				use-theme-colors=false
				visible-name='Sun Microsystems'

				[com/gexperts/Tilix/profiles/75b21a4c-150c-4f7a-a093-9faaa19626e2]
				background-color='#002B36'
				badge-color-set=false
				bold-color-set=false
				cursor-colors-set=false
				foreground-color='#839496'
				highlight-colors-set=false
				palette=['#073642', '#DC322F', '#859900', '#B58900', '#268BD2', '#D33682', '#2AA198', '#EEE8D5', '#002B36', '#CB4B16', '#586E75', '#657B83', '#839496', '#6C71C4', '#93A1A1', '#FDF6E3']
				use-theme-colors=false
				visible-name='Solarized'

				[com/gexperts/Tilix/profiles/8000e9d6-6f21-4a4e-a122-ac45607b56f5]
				background-color='#1E1E1E'
				badge-color-set=false
				bold-color-set=false
				cursor-colors-set=false
				foreground-color='#A7A7A7'
				highlight-colors-set=false
				palette=['#1E1E1E', '#CF6A4C', '#8F9D6A', '#F9EE98', '#7587A6', '#9B859D', '#AFC4DB', '#A7A7A7', '#5F5A60', '#CF6A4C', '#8F9D6A', '#F9EE98', '#7587A6', '#9B859D', '#AFC4DB', '#FFFFFF']
				use-theme-colors=false
				visible-name='Twilight'

				[com/gexperts/Tilix/profiles/d6401d4b-4b26-42ec-918a-2e7dc977118d]
				palette=['#000000', '#CC0000', '#4D9A05', '#C3A000', '#3464A3', '#754F7B', '#05979A', '#D3D6CF', '#545652', '#EF2828', '#89E234', '#FBE84F', '#729ECF', '#AC7EA8', '#34E2E2', '#EDEDEB']
				use-theme-colors=true
				visible-name='Tango'
				EOF_TLX
				dconf load / < ~/.config/rtd/gconf-tilix-settings.ini


				# Gnome Shell Theming
				# Add proffessional and crisp looking UI...
				gsettings set org.gnome.desktop.interface gtk-theme 'Arc'
				gsettings set org.gnome.desktop.interface icon-theme 'Arc'

				# Set font
				# gsettings set org.gnome.desktop.interface monospace-font-name 'Source Code Pro Semi-Bold 12'

				#Set Extensions for gnome
				gsettings set org.gnome.shell disable-user-extensions false
				gsettings set org.gnome.shell enabled-extensions "['user-theme@gnome-shell-extensions.gcampax.github.com', 'caffeine@patapon.info', 'TopIcons@phocean.net', 'dash-to-panel@jderose9.github.com']"

				# Configure dash-to-panel
				gnome-shell-extension-tool -e dash-to-panel
				gsettings set org.gnome.shell.extensions.dash-to-panel trans-use-custom-opacity 'true'


				#Better Font Smoothing
				gsettings set org.gnome.settings-daemon.plugins.xsettings antialiasing 'rgba'

				#Usability Improvements
				gsettings set org.gnome.desktop.peripherals.mouse accel-profile 'adaptive'
				gsettings set org.gnome.desktop.sound allow-volume-above-100-percent true
				gsettings set org.gnome.desktop.calendar show-weekdate true
				gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true
				gsettings set org.gnome.desktop.wm.preferences button-layout 'appmenu:minimize,maximize,close'
				gsettings set org.gnome.shell.overrides workspaces-only-on-primary false

				# Configure Dash to Dock
				gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
				gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'BOTTOM'
				gsettings set org.gnome.shell.extensions.dash-to-dock apply-custom-theme false
				gsettings set org.gnome.shell.extensions.dash-to-dock custom-background-color false
				gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots true
				gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots-color '#729fcf'
				gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-shrink true
				gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false
				gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true
				gsettings set org.gnome.shell.extensions.dash-to-dock force-straight-corner false
				gsettings set org.gnome.shell.extensions.dash-to-dock icon-size-fixed true
				gsettings set org.gnome.shell.extensions.dash-to-dock intellihide-mode 'ALL_WINDOWS'
				gsettings set org.gnome.shell.extensions.dash-to-dock isolate-workspaces true
				gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top true
				gsettings set org.gnome.shell.extensions.dash-to-dock unity-backlit-items false
				gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode 'FIXED'
				gsettings set org.gnome.shell.extensions.dash-to-dock running-indicator-style 'SEGMENTED'
				gsettings set org.gnome.shell.extensions.dash-to-dock background-opacity 0.70000000000000000
				gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false
				#gnome-shell-extension-tool -e dash-to-dock

				#This indexer is nice, but can be detrimental for laptop users battery life
				gsettings set org.freedesktop.Tracker.Miner.Files index-on-battery false
				gsettings set org.freedesktop.Tracker.Miner.Files index-on-battery-first-time false
				gsettings set org.freedesktop.Tracker.Miner.Files throttle 15

				#Nautilus (File Manager) Usability
				gsettings set org.gnome.nautilus.icon-view default-zoom-level 'standard'
				gsettings set org.gnome.nautilus.preferences executable-text-activation 'ask'
				gsettings set org.gtk.Settings.FileChooser sort-directories-first true
				gsettings set org.gnome.nautilus.list-view use-tree-view true
				gsettings set org.gnome.nautilus.list-view default-zoom-level 'small'

				# Set the GNOME Shell Apps Dashboard sort app in categories based on the FreeDesktop standard.
				gsettings set org.gnome.desktop.app-folders folder-children "['accessories', 'chrome-apps', 'games', 'graphics', 'internet', 'office', 'programming', 'science', 'sound---video', 'system-tools', 'universal-access', 'wine', 'OEM']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/accessories/ name "Accessories"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/accessories/ categories "['Utility']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/chrome-apps/ name "Chrome Apps"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/chrome-apps/ categories "['chrome-apps']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/games/ name "Games"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/games/ categories "['Game']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/graphics/ name "Graphics"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/graphics/ categories "['Graphics']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/internet/ name "Internet"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/internet/ categories "['Network', 'WebBrowser', 'Email']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/office/ name "Office"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/office/ categories "['Office']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/programming/ name "Programming"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/programming/ categories "['Development']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/science/ name "Science"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/science/ categories "['Science']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/sound---video/ name "Sound & Video"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/sound---video/ categories "['AudioVideo', 'Audio', 'Video']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/system-tools/ name "System Tools"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/system-tools/ categories "['System', 'Settings']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/universal-access/ name "Universal Access"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/universal-access/ categories "['Accessibility']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/wine/ name "Wine"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/wine/ categories "['Wine', 'X-Wine', 'Wine-Programs-Accessories']"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/OEM/ name "OEM"
				gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/OEM/ categories "['OEM']"
				EOF

				run_command_in_gnome_user_session /bin/bash gtweak.sh 

				# Add launchers for some OEM apps. 
				cat > /usr/share/applications/rtd.desktop <<-EOF
				[Desktop Entry]
				Version=2.0
				Name=RTD
				Comment=RTD Simple System Support Tool
				Exec=/opt/rtd/scripts/rtd-simple-support-tool
				Path=/opt/rtd/scripts/
				Icon=/opt/rtd/scripts/sys2.ico
				Terminal=true
				Type=Application
				Categories=OEM;
				EOF

				cat > /usr/share/applications/rtd-user-bakup.desktop <<-EOF 
				[Desktop Entry]
				Version=2.0
				Name=RTD-Backup
				Comment=RTD User home Backup Tool
				Exec=/opt/rtd/scripts/rtd-oem-backup-linux-config.sh
				Path=/opt/rtd/scripts
				Icon=/opt/rtd/scripts/sys0.ico
				Terminal=true
				Type=Application
				Categories=OEM;
				EOF
			fi

			if  ps -e |grep "plasmashell" ; then
				echo "Detected KDE UI!" 
				
				# Download and Set Wallpaper... 
				RTDCP="${_RTDCACHE:="/opt/rtd/cache"}"
				echo Downloading Wallpapers:
					mkdir -p $RTDCP && wget -q --show-progress https://github.com/${GIT_Profile}/RTD-Media/archive/master.zip -P $RTDCP && unzip -q -o $RTDCP/master.zip -d $RTDCP
					rm $RTDCP/master.zip
					pushd $RTDCP && mv -f RTD-Media-master/Wallpaper .. && mv -f RTD-Media-master/Sound .. 
				rtd_oem_kde_set_wallpaper "/opt/rtd/Wallpaper/Wayland.jpg" 

				lookandfeeltool -a 'org.kde.breezedark.desktop'
				rm /opt/rtd/cache/master.zip
				wget https://github.com/vinceliuice/vimix-kde/archive/master.zip  -P /opt/rtd/cache
				unzip -o /opt/rtd/cache/master.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/vimix-kde-master && ./install.sh && popd && rm /opt/rtd/cache/master.zip

				wget https://github.com/${GIT_Profile}/RTD-Media/raw/master/Themes/vimix-icon-themes.zip -P /opt/rtd/cache
				unzip -o /opt/rtd/cache/vimix-icon-themes.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/vimix-icon-theme-master && ./install.sh && popd && popd && rm /opt/rtd/cache/master.zip
				lookandfeeltool -a  'com.github.vinceliuice.Vimix-Dark-Doder'

			fi
}

